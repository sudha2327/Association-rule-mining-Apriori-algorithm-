# -*- coding: utf-8 -*-
"""Ass5_associationRM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I0gVqUdQ6wUuLFTc5uHKW6YRIByapZYI
"""

import csv
import pandas as pd

df = pd.read_csv('Groceries_dataset.csv')

df

print("Dataset Dimension : ",df.shape)
print("Dataset Size : ",df.size)

df.info()

df['Member_number'].nunique()

"""Calculate Item frequency"""

itemFrequency = df['itemDescription'].value_counts().sort_values(ascending=False)
itemFrequency.head(10)



"""Association Rule Mining"""

from mlxtend.frequent_patterns import association_rules, apriori
def encoder(x):
    if x <= 0:
        return 0
    if x >= 1:
        return 1

apriori_data = df.groupby(['Member_number','itemDescription'])['itemDescription'].count().reset_index(name ='Count')
apriori_data

#we are creating a pivot_table (A PivotTable is an interactive way to quickly summarize large amounts of data.)
apriori_basket = apriori_data.pivot_table(index = 'Member_number', columns = 'itemDescription', values = 'Count', aggfunc = 'sum').fillna(0)
#we apply the map encoder
apriori_basket_set = apriori_basket.applymap(encoder)
apriori_basket_set.head()

#analyze the rules with min_support 50% and then for 50% min_confidence respectively.

from mlxtend.frequent_patterns import association_rules


f_items = apriori(apriori_basket_set, min_support = 0.05, use_colnames = True)
f_items

apriori_rules = association_rules(f_items, metric = 'lift', min_threshold = 0.05)
apriori_rules.sort_values('confidence', ascending = False, inplace = True)
apriori_rules

"""for 7 percent and 6 percent"""

f_items = apriori(apriori_basket_set, min_support = 0.07, use_colnames = True)
f_items

apriori_rules = association_rules(f_items, metric = 'lift', min_threshold = 0.06)
apriori_rules.sort_values('confidence', ascending = False, inplace = True)
apriori_rules

print(apriori_rules)

support=apriori_rules['support']
confidence=apriori_rules['confidence']

import random
import matplotlib.pyplot as plt
 
 
for i in range (len(support)):
   support[i] = support[i] + 0.0025 * (random.randint(1,10) - 5) 
   confidence[i] = confidence[i] + 0.0025 * (random.randint(1,10) - 5)
 
plt.scatter(support, confidence,   alpha=0.5, marker="*")
plt.xlabel('support')
plt.ylabel('confidence') 
plt.show()

import seaborn as sns1
 
for i in range (len(support)):
    support[i] = support[i] 
    confidence[i] = confidence[i] 
     
plt.title('Association Rules')
plt.xlabel('support')
plt.ylabel('confidence')    
sns1.regplot(x=support, y=confidence, fit_reg=False)